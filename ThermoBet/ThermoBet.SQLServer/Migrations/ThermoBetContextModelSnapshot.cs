// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThermoBet.Data;

namespace ThermoBet.SQLServer.Migrations
{
    [DbContext(typeof(ThermoBetContext))]
    partial class ThermoBetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ThermoBet.Core.Models.BetModel", b =>
                {
                    b.Property<int>("MarketId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SelectionId")
                        .HasColumnType("int");

                    b.HasKey("MarketId", "TournamentId", "UserId");

                    b.HasIndex("SelectionId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.LoginHistoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LoginDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.MarketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("WinningSelectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinningSelectionId")
                        .IsUnique();

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.SelectionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsYes")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("MarketId", "IsYes")
                        .IsUnique();

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.TournamentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.TournamentUserOptinModel", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TournamentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentUserOptins");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.TournamentWinnableModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountOfWinnings")
                        .HasColumnType("int");

                    b.Property<int>("NbGoodAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentWinnableModel");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("BetclicUserName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("CurrentPoints")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("GlobalPoints")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Pseudo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SecondName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ThermoBet.SQLServer.Models.ConfigurationModel", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Key");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.BetModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.MarketModel", "Market")
                        .WithMany("Bets")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThermoBet.Core.Models.SelectionModel", "Selection")
                        .WithMany("Bets")
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThermoBet.Core.Models.TournamentModel", "Tournament")
                        .WithMany("Bets")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThermoBet.Core.Models.UserModel", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThermoBet.Core.Models.LoginHistoryModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.UserModel", "User")
                        .WithMany("LoginDate")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.MarketModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.TournamentModel", "Tournament")
                        .WithMany("Markets")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.SelectionModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.MarketModel", "Market")
                        .WithMany("Selections")
                        .HasForeignKey("MarketId");
                });

            modelBuilder.Entity("ThermoBet.Core.Models.TournamentUserOptinModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.TournamentModel", "Tournament")
                        .WithMany("OptinUsers")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThermoBet.Core.Models.UserModel", "User")
                        .WithMany("OptinTournament")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThermoBet.Core.Models.TournamentWinnableModel", b =>
                {
                    b.HasOne("ThermoBet.Core.Models.TournamentModel", "Tournament")
                        .WithMany("Winnables")
                        .HasForeignKey("TournamentId");
                });
#pragma warning restore 612, 618
        }
    }
}
